package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/build"
	"go/format"
	"go/importer"
	"go/parser"
	"go/printer"
	"go/token"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"path"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
)

var (
	typeNames = flag.String("type", "", "comma-separated list of type names; must be set")
	output    = flag.String("output", "", "output file name; default srcdir/<type>_inject.go")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tinjector [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tinjector [flags] -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("injector: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typeNames, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var dir string
	g := Generator{}
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
		g.parsePackageDir(args[0], nil)
	} else {
		dir = filepath.Dir(args[0])
		g.parsePackageFiles(args)
	}

	g.Printf("// Code generated by \"injector %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")

	// Run generate for each type.
	for _, typeName := range types {
		g.generate(typeName)
	}

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_inject.go", types[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
	pkg *Package     // Package we are scanning.

	trimPrefix  string
	lineComment bool
}

// Printf writes a formatted string to the output buffer
func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// File holds a single parsed file and associated data.
type File struct {
	pkg          *Package  // Package to which this file belongs.
	file         *ast.File // Parsed AST.
	source       []byte
	tokenFileSet *token.FileSet

	// These fields are reset for each type being generated.
	typeName string  // Name of the constant type.
	values   []Value // Accumulator for constant values of that type.
	injects  []InjectableInterface

	trimPrefix  string
	lineComment bool

	// decls are the package imports. key is base package or renamed package, value is import path.
	decls map[string]string
}

// Package represents a package
type Package struct {
	dir      string
	name     string
	defs     map[*ast.Ident]types.Object
	files    []*File
	typesPkg *types.Package
}

func buildContext(tags []string) *build.Context {
	ctx := build.Default
	ctx.BuildTags = tags
	return &ctx
}

// parsePackageDir parses the package residing in the directory.
func (g *Generator) parsePackageDir(directory string, tags []string) {
	pkg, err := buildContext(tags).ImportDir(directory, 0)
	if err != nil {
		log.Fatalf("cannot process directory %s: %s", directory, err)
	}
	var names []string
	names = append(names, pkg.GoFiles...)
	names = append(names, pkg.CgoFiles...)
	names = append(names, pkg.SFiles...)
	names = prefixDirectory(directory, names)
	g.parsePackage(directory, names, nil)
}

// parsePackageFiles parses the package occupying the named files.
func (g *Generator) parsePackageFiles(names []string) {
	g.parsePackage(".", names, nil)
}

// prefixDirectory places the directory name on the beginning of each name in the list.
func prefixDirectory(directory string, names []string) []string {
	if directory == "." {
		return names
	}
	ret := make([]string, len(names))
	for i, name := range names {
		ret[i] = filepath.Join(directory, name)
	}
	return ret
}

// parsePackage analyzes the single package constructed from the named files.
// If text is non-nil, it is a string to be used instead of the content of the file,
// to be used for testing. parsePackage exits if there is an error.
func (g *Generator) parsePackage(directory string, names []string, text interface{}) {
	var files []*File
	var astFiles []*ast.File
	g.pkg = new(Package)
	fs := token.NewFileSet()
	for _, name := range names {
		if !strings.HasSuffix(name, ".go") {
			continue
		}
		fileBytes, err := ioutil.ReadFile(name)
		if err != nil {
			log.Fatalf("reading source file: %s: %s", name, err)
		}
		parsedFile, err := parser.ParseFile(fs, name, fileBytes, parser.ParseComments)
		if err != nil {
			log.Fatalf("parsing package: %s: %s", name, err)
		}
		astFiles = append(astFiles, parsedFile)
		files = append(files, &File{
			file:         parsedFile,
			pkg:          g.pkg,
			trimPrefix:   g.trimPrefix,
			lineComment:  g.lineComment,
			source:       fileBytes,
			tokenFileSet: fs,
			decls:        map[string]string{},
		})
	}
	if len(astFiles) == 0 {
		log.Fatalf("%s: no buildable Go files", directory)
	}
	g.pkg.name = astFiles[0].Name.Name
	g.pkg.files = files
	g.pkg.dir = directory
	g.pkg.typeCheck(fs, astFiles)
}

// check type-checks the package so we can evaluate contants whose values we are printing.
func (pkg *Package) typeCheck(fs *token.FileSet, astFiles []*ast.File) {
	pkg.defs = make(map[*ast.Ident]types.Object)
	config := types.Config{
		IgnoreFuncBodies: true, // We only need to evaluate constants.
		Importer:         defaultImporter(),
		FakeImportC:      true,
	}
	info := &types.Info{
		Defs: pkg.defs,
	}
	typesPkg, err := config.Check(pkg.dir, fs, astFiles, info)
	if err != nil {
		log.Fatalf("checking package: %s", err)
	}
	pkg.typesPkg = typesPkg
}

// generate produces the String method for the named type.
func (g *Generator) generate(typeName string) {
	injects := make([]InjectableInterface, 0, 100)

	for _, file := range g.pkg.files {
		// Set the state for this run of the walker.
		file.typeName = typeName
		file.values = nil
		if file.file != nil {
			ast.Inspect(file.file, file.genDecl)
			injects = append(injects, file.injects...)
		}
	}

	if len(injects) == 0 {
		log.Fatalf("no injects defined for type %s", typeName)
	}

	for _, inject := range injects {
		g.writeInject(inject)
	}
}

// Signature generates a signature for the method
func (meth InjectableMethod) Signature() string {
	funcArgParts := []string{}
	for _, inParam := range meth.InValues {
		if inParam.RepeatIndex > 0 {
			funcArgParts = append(funcArgParts, inParam.Name)
			continue
		}
		funcArgParts = append(funcArgParts, fmt.Sprintf("%s %s", inParam.Name, inParam.Type))
	}

	returnValParts := []string{}
	for _, outParam := range meth.OutValues {
		returnValParts = append(returnValParts, outParam.Type)
	}
	returnValStr := strings.Join(returnValParts, ",")
	if len(returnValParts) == 0 {
		returnValStr = ""
	} else if len(returnValParts) > 1 {
		returnValStr = fmt.Sprintf("(%s)", returnValStr)
	}
	return fmt.Sprintf("(%s) %s", strings.Join(funcArgParts, ","), returnValStr)
}

// Call generates the string representation of the list of parameters
// that must be passed to a function to call it
func (meth InjectableMethod) Call() string {
	funcArgParts := []string{}
	for _, inParam := range meth.InValues {
		if strings.HasPrefix(inParam.Type, "...") {
			// Variadic function
			funcArgParts = append(funcArgParts, inParam.Name+"...")
		} else {
			funcArgParts = append(funcArgParts, inParam.Name)
		}
	}
	return strings.Join(funcArgParts, ", ")

}

func (g *Generator) writeInject(inject InjectableInterface) {
	if len(inject.Imports) > 0 {
		g.Printf("import (\n")
		for _, importSpec := range inject.Imports {
			g.Printf("%s\n", importSpec)
		}
		g.Printf(")\n\n")
	}

	g.Printf("type Inject%s struct {\n", inject.Name)
	g.Printf("DefaultImplementation %s\n", inject.Name)

	for _, method := range inject.Methods {
		g.Printf("Inject%s func%s\n", method.Name, method.Signature())
	}

	g.Printf("}\n")

	for _, method := range inject.Methods {
		g.Printf("// %s calls the injected function for %s if it exists, or the default implementation's\n", method.Name, method.Name)
		g.Printf("func (inject *Inject%s) %s%s{\n", inject.Name, method.Name, method.Signature())
		g.Printf("if inject.Inject%s != nil {\n", method.Name)
		if len(method.OutValues) > 0 {
			g.Printf("return inject.Inject%s(%s)\n", method.Name, method.Call())
		} else {
			g.Printf("inject.Inject%s(%s)\nreturn\n", method.Name, method.Call())
		}

		g.Printf("}\n")
		if len(method.OutValues) > 0 {
			g.Printf("return inject.DefaultImplementation.%s(%s)\n", method.Name, method.Call())
		} else {
			g.Printf("inject.DefaultImplementation.%s(%s)\nreturn\n", method.Name, method.Call())
		}
		g.Printf("}\n\n")
	}

}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

// Value represents a declared constant.
type Value struct {
	name string // The name of the constant.
	// The value is stored as a bit pattern alone. The boolean tells us
	// whether to interpret it as an int64 or a uint64; the only place
	// this matters is when sorting.
	// Much of the time the str field is all we need; it is printed
	// by Value.String.
	value  uint64 // Will be converted to int64 when needed.
	signed bool   // Whether the constant is a signed type.
	str    string // The string representation given by the "go/constant" package.
}

// InjectableInterface describes the type that the inject is being generated for
type InjectableInterface struct {
	Name    string
	Methods []InjectableMethod
	Imports []string
}

// InjectableMethod describes a method in an interface that is to be injected
type InjectableMethod struct {
	Name      string
	InValues  []Param
	OutValues []Param
}

// Param describes a function input or output value
type Param struct {
	Name        string
	Type        string
	RepeatIndex int
}

func (v *Value) String() string {
	return v.str
}

type visitFn func(node ast.Node) ast.Visitor

func (fn visitFn) Visit(node ast.Node) ast.Visitor {
	return fn(node)
}

type selectorCollector struct {
	selectors map[string]bool
}

func (sc *selectorCollector) Visit(node ast.Node) ast.Visitor {
	if selectorExpr, ok := node.(*ast.SelectorExpr); ok {
		sc.selectors[selectorExpr.X.(*ast.Ident).Name] = true
	}
	return sc
}

// genDecl processes one declaration clause.
func (f *File) genDecl(node ast.Node) bool {
	importDecl, ok := node.(*ast.ImportSpec)
	if ok {
		var importBuf bytes.Buffer
		err := printer.Fprint(&importBuf, f.tokenFileSet, importDecl)
		if err != nil {
			log.Fatalf("failed printing %s", err)
		}

		if importDecl.Name != nil {
			f.decls[importDecl.Name.Name] = importBuf.String()
		}
		ipath := strings.Trim(importDecl.Path.Value, `"`)
		if ipath == "C" {
			return false
		}
		local := importPathToNameGoPath(ipath, f.pkg.dir)
		f.decls[local] = importBuf.String()
		return false
	}

	interfaceTypeDecl, ok := node.(*ast.TypeSpec)
	if !ok {
		return true
	}
	if interfaceTypeDecl.Name.Name != f.typeName {
		// Not the correct type name
		return false
	}
	interfaceTypeNode, ok := interfaceTypeDecl.Type.(*ast.InterfaceType)
	if !ok {
		return false // not an interface type
	}
	inject := InjectableInterface{Name: interfaceTypeDecl.Name.Name}

	sc := &selectorCollector{map[string]bool{}}
	ast.Walk(sc, interfaceTypeNode)

	for k, _ := range sc.selectors {
		importSpec, ok := f.decls[k]
		if !ok {
			continue
		}

		inject.Imports = append(inject.Imports, importSpec)
	}

	for _, method := range interfaceTypeNode.Methods.List {
		methodInject := InjectableMethod{Name: method.Names[0].Name}

		for j, param := range method.Type.(*ast.FuncType).Params.List {
			var typeNameBuf bytes.Buffer
			err := printer.Fprint(&typeNameBuf, f.tokenFileSet, param.Type)
			if err != nil {
				log.Fatalf("failed printing %s", err)
			}

			switch {
			case param.Names == nil:
				// unnamed parameters - make up a name
				methodInject.InValues = append(methodInject.InValues, Param{
					Name:        fmt.Sprintf("arg%d", j),
					Type:        typeNameBuf.String(),
					RepeatIndex: -1,
				})
			case len(param.Names) == 1:
				methodInject.InValues = append(methodInject.InValues, Param{
					Name:        param.Names[0].Name,
					Type:        typeNameBuf.String(),
					RepeatIndex: -1,
				})
			default:
				for k, paramName := range param.Names {
					methodInject.InValues = append(methodInject.InValues, Param{
						Name:        paramName.Name,
						Type:        typeNameBuf.String(),
						RepeatIndex: len(param.Names) - k - 1,
					})
				}
			}
		}

		for _, param := range method.Type.(*ast.FuncType).Results.List {
			var typeNameBuf bytes.Buffer
			err := printer.Fprint(&typeNameBuf, f.tokenFileSet, param.Type)
			if err != nil {
				log.Fatalf("failed printing %s", err)
			}

			switch {
			case param.Names == nil:
				fallthrough
			case len(param.Names) == 1:
				methodInject.OutValues = append(methodInject.OutValues, Param{
					Type:        typeNameBuf.String(),
					RepeatIndex: -1,
				})
			default:
				for _, paramName := range param.Names {
					methodInject.OutValues = append(methodInject.OutValues, Param{
						Name:        paramName.Name,
						Type:        typeNameBuf.String(),
						RepeatIndex: -1,
					})
				}
			}
		}
		inject.Methods = append(inject.Methods, methodInject)

	}
	f.injects = append(f.injects, inject)
	return false
}

func defaultImporter() types.Importer {
	return importer.For("source", nil)
}

// From imports////////////////

// importPathToNameGoPath finds out the actual package name, as declared in its .go files.
// If there's a problem, it falls back to using importPathToNameBasic.
func importPathToNameGoPath(importPath, srcDir string) (packageName string) {
	pkgName, err := importPathToNameGoPathParse(importPath, srcDir)
	if err == nil {
		return pkgName
	}
	return importPathToNameBasic(importPath, srcDir)
}

// importPathToNameBasic assumes the package name is the base of import path,
// except that if the path ends in foo/vN, it assumes the package name is foo.
func importPathToNameBasic(importPath, srcDir string) (packageName string) {
	base := path.Base(importPath)
	if strings.HasPrefix(base, "v") {
		if _, err := strconv.Atoi(base[1:]); err == nil {
			dir := path.Dir(importPath)
			if dir != "." {
				return path.Base(dir)
			}
		}
	}
	return base
}

// importPathToNameGoPathParse is a faster version of build.Import if
// the only thing desired is the package name. It uses build.FindOnly
// to find the directory and then only parses one file in the package,
// trusting that the files in the directory are consistent.
func importPathToNameGoPathParse(importPath, srcDir string) (packageName string, err error) {
	buildPkg, err := build.Import(importPath, srcDir, build.FindOnly)
	if err != nil {
		return "", err
	}
	d, err := os.Open(buildPkg.Dir)
	if err != nil {
		return "", err
	}
	names, err := d.Readdirnames(-1)
	d.Close()
	if err != nil {
		return "", err
	}
	sort.Strings(names) // to have predictable behavior
	var lastErr error
	var nfile int
	for _, name := range names {
		if !strings.HasSuffix(name, ".go") {
			continue
		}
		if strings.HasSuffix(name, "_test.go") {
			continue
		}
		nfile++
		fullFile := filepath.Join(buildPkg.Dir, name)

		fset := token.NewFileSet()
		f, err := parser.ParseFile(fset, fullFile, nil, parser.PackageClauseOnly)
		if err != nil {
			lastErr = err
			continue
		}
		pkgName := f.Name.Name
		if pkgName == "documentation" {
			// Special case from go/build.ImportDir, not
			// handled by ctx.MatchFile.
			continue
		}
		if pkgName == "main" {
			// Also skip package main, assuming it's a +build ignore generator or example.
			// Since you can't import a package main anyway, there's no harm here.
			continue
		}
		return pkgName, nil
	}
	if lastErr != nil {
		return "", lastErr
	}
	return "", fmt.Errorf("no importable package found in %d Go files", nfile)
}
